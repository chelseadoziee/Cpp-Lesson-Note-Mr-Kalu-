============================= CLASS 1 ==========================
C++ Syntax:
  Line 1: #include <iostream> is a header file library that lets us work with input and output objects, such as cout (used in line 6). Header files add functionality to C++ programs. 
  Line 2: When you're coding in C++, you often use features from the Standard Libraryâ€”like `cout`, `cin`, `string`, etc. These features are stored in a namespace called `std`.
  Think of a namespace like a folder: you can have a variable named x in two different folders, and they won't clash.
  `std` is like a toolbox (namespace) that holds many useful tools like `cout`, `cin`, `string`.
  `using namespace std;` lets you use tools from that toolbox without writing `std::` every time.
  * It's fine for small programs but use with care in bigger ones.

  Line 3: A blank line. C++ ignores white space. But we use it to make the code more readable.
  
  Line 4: Another thing that always appear in a C++ program is int main(). This is called a function. Any code inside its curly brackets {} will be executed.
  
  Line 5: cout (pronounced "see-out") is an object used together with the insertion operator (<<) to output/print text. In our example, it will output "Hello World!".
  Note: 
  - C++ is case-sensitive: "cout" and "Cout" has different meaning.
  - Every C++ statement ends with a semicolon ;.
  - The body of int main() could also been written as:
  - int main () { cout << "Hello World! "; return 0; }
  
  Remember: The compiler ignores white spaces. However, multiple lines makes the code more readable.
  
  Line 6:  '::' called the scope resolution operator

  Line 7: return 0; ends the main function.
  
  Line 8: Do not forget to add the closing curly bracket '}' to actually end the main function.


Namespaces:
  A namespace is a way to group related code together under a name. It helps you avoid naming conflicts when your code grows or when you use code from multiple sources.

  Think of a namespace like a folder: you can have a variable named x in two different folders, and they won't clash.

  Why Use Namespaces?
    To avoid name conflicts, especially in larger projects
    To organize code into logical groups
    To separate your code from code in libraries

  Try out Namespace Examples...


Output:
  The cout object, together with the << (insertion operator), is used to output values/print text.
  You can add as much as you want.


New Lines Charater:
  To insert a new line, you can use the \n character (called an escape sequence).
  To insert a new line, you can also use the endl manipulator.
  Using endl flushes the buffer (displays the output immediately), while \n charater is more performant.


Comments:
  Single line comments - //
  Multi-line comments - starts with /* and ends with */
  
  Note: 
    Comments are ignored by the compiler, and are used to explain code, making it more readable for humans.
    Comments can also be used to prevent execution of code, which is useful for debugging.


Variables:
  Declaration
    int num;
  
  Assignment
    num = 15;

  Both process above is called 'Initialization'
    
  Declaring Many Variables:
    int x = 5, y = 6, z = 50;
          OR   
    int x, y, z;
    x = y = z = 50;


Indentifier (unique names for variables):
  The general RULES for naming variables are:
    1. Names can contain letters, digits and underscores.
    2. Names must begin with a letter or an underscore (_).
    3. Names are case sensitive (myVar and myvar are different variables).
    4. Names cannot contain whitespaces or special characters like !, #, %, etc.
    5. Reserved words (like C++ keywords, such as int) cannot be used as names.
      Note: It is recommended to use descriptive names in order to create understandable and maintainable code.


Exercise: 
  1. Create a boiler plate for most cpp code base.
  2. Output your name to the console with your first-name on the first line and your last-name on the third line.
  3. Create a single line comment describing a title for any function of your choice.
  4. Place comments on every line of your function describing what exactly that line does.
  5. Create a multiline comment that summarizing the functionality in 1 above.

Assignment:
  Read up on what buffering is and what it means to flush the buffer (endl & \n)

=============================== End ============================


============================= CLASS 2 ==========================
Constants:
  To prevent overriding existing variable values, use the const keyword (this will declare the variable as "constant", which means unchangeable and read-only).

  const int myNum = 15;  -> myNum will always be 15
  myNum = 10;  -> error: assignment of read-only variable 'myNum'


User Input:
  cout is pronounced "see-out". Used for output, and uses the insertion operator (<<)
  cin is pronounced "see-in". Used for input, and uses the extraction operator (>>)
  cin is a predefined variable that reads data from the keyboard with the extraction operator (>>).

  NOTE the following: 
    1. Taking input with space, use the getline() function -> getline(cin, var_name);
        However, cin considers a space (whitespace, tabs, etc) as a terminating character, which means that it can only store a single word (even if you type many words). That's why, when working with strings, we often use the getline() function to read a line of text. It takes cin as the first parameter, and the string variable as second.

    2. Use getline(cin >> ws, var_name) to eliminate any new line characters in the buffer from a previous line.
  
  EXERCISE: 
    Create a calculator where users must input two numbers. Then print the sum of the two numbers.
    

Data Type:
  int myNum = 5;               -> Integer (whole number)
  float myFloatNum = 5.99;     -> Floating point number | 4 bytes | 7 decimals digits
  double myDoubleNum = 9.98;   -> Floating point number | 8 bytes | 15 decimals digits | Safer for use
  char myLetter = 'D';         -> Character
  bool myBoolean = true;       -> Boolean (When the value is returned, true = 1 and false = 0)
  string myText = "Hello";     -> String (a sequence of characters, texts)
  auto num = 5 (this infers the data type of the variable and must be assigned). This is not a data type though just a keyword...!

  EXERCISE: 
    Create your own data opf different types using all the data-type listed above.


Operators: 
  Arithmetic: +, -, /, *, %, ++, --
  Assignment: =, += etc...
  Comparison: ==, !=, >, <, >=, <=
  Logical: &&, ||, !,

=============================== End ============================


============================= CLASS 3 ==========================
Strings:
  1. Concatenation (i.e using the + sign to combine strings together). You can also use the append() method
  
  2. Adding Numbers and strings
     This gives an error and isn't possible
  
  3. Length of characers in a string
     use the function length() or size() like so text.length()
  
  4. Accessing the characters in Strings
     string chararcters are index from 0 and can be accessed by using bracket notations [] like so text[0] for the first element. 
     
     Getting the last element, by using text[text.length() - 1]
     Characters can also be changed like so text[0] = "Some_character". OR text.at(0) = "Some_character";
  
  5. Backslash Escape Character
     Examples include; -> \', \", \\, \n, \t
  
  6. C-Style Strings (an array of characters)
    string myName[] = "Kelechi";


C++ Math:
  max(a, b) | min(a, b) -> check references for more...
  <cmath> Library has othe functions that include sqrt | round | log among others...
  A couple of a few others include floor, ceil, sin, sinh, pow, exp, acos, cbrt etc


C++ Booleans:
  Boolean Values:
    Very often, in programming, you will need a data type that can only have one of two values, like:

    YES / NO
    ON / OFF
    TRUE / FALSE
    For this, C++ has a bool data type, which can take the values true (1) or false (0).
    Examples:
      bool isCodingFun = true;
      bool isFishTasty = false;
      cout << isCodingFun;  // Outputs 1 (true)
      cout << isFishTasty;  // Outputs 0 (false)


  Boolean Expressions:
    A Boolean expression is a C++ expression that returns a boolean value: 1 (true) or 0 (false).
    You can use a comparison operator, such as the greater than (>) operator to find out if an expression (or a variable) is true:
      int x = 10;
      int y = 9;
      cout << (x > y); // returns 1 (true), because 10 is higher than 9

    Booleans are the basis for all C++ comparisons and conditions.


C++ Conditions and If Statements:
  C++ supports the usual logical conditions from mathematics:
    Less than: a < b
    Less than or equal to: a <= b
    Greater than: a > b
    Greater than or equal to: a >= b
    Equal to a == b
    Not Equal to: a != b

  You can use these conditions to perform different actions for different decisions.
  
  C++ has the following conditional statements:
    - Use if to specify a block of code to be executed, if a specified condition is true
    - Use else to specify a block of code to be executed, if the same condition is false
    - Use else if to specify a new condition to test, if the first condition is false
    - Use switch to specify many alternative blocks of code to be executed


  The if Statement
    Use the if statement to specify a block of C++ code to be executed if a condition is true.
      
      Syntax:
      if (condition) {
          block of code to be executed if the condition is true
      }
      Example:
        if (20 > 18) {
          cout << "20 is greater than 18";
        }
  
  Note that if is in lowercase letters. Uppercase letters (If or IF) will generate an error.


  The else Statement
    Use the else statement to specify a block of code to be executed if the condition is false.

    Syntax:
      if (condition) {
          block of code to be executed if the condition is true
      } else {
          block of code to be executed if the condition is false
      }
    Example
      int time = 20;
      if (time < 18) {
        cout << "Good day.";
      } else {
        cout << "Good evening.";
      }
      // Outputs "Good evening."


  The else if Statement
    Use the else if statement to specify a new condition if the first condition is false.

    Syntax:
      if (condition1) {
          block of code to be executed if condition1 is true
      } else if (condition2) {
          block of code to be executed if the condition1 is false and condition2 is true
      } else {
          block of code to be executed if the condition1 is false and condition2 is false
      }
    Example
      int time = 22;
      if (time < 10) {
        cout << "Good morning.";
      } else if (time < 20) {
        cout << "Good day.";
      } else {
        cout << "Good evening.";
      }
      // Outputs "Good evening."


  Short Hand If...Else (Ternary Operator):
    There is also a short-hand if else, which is known as the ternary operator because it consists of three operands. It can be used to replace multiple lines of code with a single line. It is often used to replace simple if else statements:
    
    Syntax:
      variable = (condition) ? expressionTrue : expressionFalse;
    
    Instead of writing...
    
    Example
      int time = 20;
      if (time < 18) {
        cout << "Good day.";
      } else {
        cout << "Good evening.";
      }
    
    You can simply write...

      int time = 20;
      string result = (time < 18) ? "Good day." : "Good evening.";
      cout << result;


ASSIGNMENT:
  Write a function for the following.
    1. That opens a door if the user enters a correect code.
    2. To find out if a numbe is positive or negative.
    3. To find out if a person is old enough to vote.
    4. To find out if a number is even or odd.

=============================== End ============================


============================= CLASS 4 ==========================
C++ Switch Statements
  Use the switch statement to select one of many code blocks to be executed.

  Syntax:
    switch(expression) {
      case x:
        code block
        break;
      case y:
        code block
        break;
      default:
        code block
    }

  This is how it works:
    - The switch expression is evaluated once.
    - The value of the expression is compared with the values of each cases.
    - If there is a match, the associated block of code is executed.
    - The break and default keywords are optional.
  
  The example below uses the weekday number to calculate the weekday name.
  Example:
    int day = 4;
    switch (day) {
      case 1:
        cout << "Monday";
        break;
      case 2:
        cout << "Tuesday";
        break;
      case 3:
        cout << "Wednesday";
        break;
      case 4:
        cout << "Thursday";
        break;
      case 5:
        cout << "Friday";
        break;
      case 6:
        cout << "Saturday";
        break;
      case 7:
        cout << "Sunday";
        break;
    }
    // Outputs "Thursday" (day 4)


The break Keyword:
  When C++ reaches a break keyword, it breaks out of the switch block.
  This will stop the execution of more code and case testing inside the block.
  When a match is found, and the job is done, it's time for a break. There is no need for more testing.
  A break can save a lot of execution time because it "ignores" the execution of all the rest of the code in the switch block.


The default Keyword:
  The default keyword specifies some code to run if there is no case match.

  Example
    int day = 4;
    switch (day) {
      case 6:
        cout << "Today is Saturday";
        break;
      case 7:
        cout << "Today is Sunday";
        break;
      default:
        cout << "Looking forward to the Weekend";
    }
    // Outputs "Looking forward to the Weekend"
    
    Note: The default keyword must be used as the last statement in the switch, and it does not need a break.   


Assignment:
  Use the switch statement to create a function that picks a color that suits the following fruits (apple, pineapple, orange, pear, banana).

  Note:
    - Picking apple should log green.
    - Picking pineapple should log brown.
    - Picking orange should log orange.
    - Picking pear should log brownish-green.
    - Picking banana should log yellow.

=============================== End ============================



============================= CLASS 5 ==========================
C++ Loops:
  Loops can execute a block of code as long as a specified condition is reached.
  Loops are handy because they save time, reduce errors, and they make code more readable.

C++ While Loop:
  The while loop iterates through a block of code as long as a specified condition remains true.

  Syntax
    while (condition) {
      // code block to be executed
    }
  
  In the example below, the code in the loop will run, over and over again, as long as a variable (i) is less than 5.

  Example
    int i = 0;
    while (i < 5) {
      cout << i << "\n";
      i++;
    }
  Note: Do not forget to increase the variable used in the condition, otherwise the loop will never end!


C++ Do/While Loop
  The do/while loop is a variant of the while loop. This loop will execute the code block once, before checking if the condition is true, then it will repeat the loop as long as the condition remain true.

  Syntax
    do {
      code block to be executed
    }
    while (condition);

  The example below uses a do/while loop. The loop will always be executed at least once, even if the condition is false, because the code block is executed before the condition is tested.

  Example:
    int i = 0;
    do {
      cout << i << "\n";
      i++;
    }
    while (i < 5);
  
  Do not forget to increase the variable used in the condition, otherwise the loop will never end!


C++ For Loop
  When you know exactly how many times you want to loop through a block of code, use the for loop instead of a while loop:

  Syntax
    for (statement 1; statement 2; statement 3) {
      code block to be executed
    }
  Statement 1 is executed (one time) before the execution of the code block.
  Statement 2 defines the condition for executing the code block.
  Statement 3 is executed (every time) after the code block has been executed.
  The example below will print the numbers 0 to 4:
  
  Example:
    for (int i = 0; i < 5; i++) {
      cout << i << "\n";
    }

  Example explained:
    Statement 1 sets a variable before the loop starts (int i = 0).
    Statement 2 defines the condition for the loop to run (i must be less than 5). If the condition is true, the loop will start over again, if it is false, the loop will end.
    Statement 3 increases a value (i++) each time the code block in the loop has been executed.

  Another Example:
    This example will only print even values between 0 and 10:

  Example:
    for (int i = 0; i <= 10; i = i + 2) {
      cout << i << "\n";
    }

Summary:
  - The do/while loop always runs at least once, even if the condition is already false. This is different from a regular while loop, which ould skip the loop entirely if the condition is false at the start.
  - This behaviour makes do/while useful when you ant to ensure something happens at least once, like shoing a message or asking for user input.


C++ Break and Continue
  C++ Break
    You have already seen the break statement used in an earlier chapter of this tutorial. It was used to "jump out" of a switch statement. The break statement can also be used to jump out of a loop. This example jumps out of the loop when i is equal to 4.

  Example:
  for (int i = 0; i < 10; i++) {
    if (i == 4) {
      break;
    }
    cout << i << "\n";
  }

  C++ Continue
    The continue statement breaks one iteration (in the loop), if a specified condition occurs, and continues with the next iteration in the loop.

    Example (This example skips the value of 4)
    for (int i = 0; i < 10; i++) {
      if (i == 4) {
        continue;
      }
      cout << i << "\n";
    }

  Break and Continue in While Loop
    You can also use break and continue in while loops:

    Break Example:
      int i = 0;
      while (i < 10) {
        cout << i << "\n";
        i++;
        if (i == 4) {
          break;
        }
      }
    
    Continue Example:
      int i = 0;
      while (i < 10) {
        if (i == 4) {
          i++;
          continue;
        }
        cout << i << "\n";
        i++;
      }

ASSIGNMENT:
  1. Log only even numbers from 10 (inclusive) to 1 using a while loop.
  2. Keep asking the user to enter a number until they enter 0.
  3. Log the multiplication of 5 (in this format, from 5x1=5 to 5x12=60).
  4. Log nubers from 1 to 10, skip 5 and stop at 8.

  Real-life Scenarios:
    - Create a simple countdown program that logs 'Happy New Year!!!' after counting down from 3 to 0.
      a. Using a while loop.
      b. Using a for loop.
    - Create a program that reverses some numbers using a while loop and then a for loop.
      a. Using a while loop.
      b. Using a for loop.

=============================== End ============================


============================= CLASS 6 ==========================


=============================== End ============================


============================= CLASS 7 ==========================


=============================== End ============================






